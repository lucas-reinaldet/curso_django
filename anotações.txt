O arquivo ASGI é do Django 3 -> Forma de fazer deproid de forma assincrona (mais v eloz e melhor perfomace)

WSGI -> Serve para deproid e pertence as versoes anteriores

3,0 Tem suporte ao MariaDB

É indicado que a nomenclatura do model seja escrita em inglês

O Django é composto por APP's

_________________________________________

python manage.py migrate -> criar tabela e popular essas tabelas padroes do python

python manage.py createsuperuser -> criar um super usuario

python manage.py runserver -> acessar a URL -> acrescentar /admin -> acessar pasta de administração do django

Em URls.py será o responsavel por ligar a WEB com a View do sistema

python manage.py startapp nome_app  -> criou uma app

Ao criar uma app deve-se ir em settings.py e acrescentar o nome à variavel installed_apps.

_________________________________________

em models.py do app criado, para criar um modelo da base de dados, é utilizado uma classe que herda de models.Model (from django.db import models)

Exemplo de uma Classe modelo Criada:

class Post(models.Model):
    title = models.CharField(max_length=100)
    sub_title = models.CharField(max_length=200)
    content = models.TextField() #tamanho em aberto
    
_________________________________________

Apos criado o model, ao executar o comando

python manage.py makemigrations

é executado uma verificação em todas as apps listadas, e caso algum novo model foi criado, cria um arquivo dentro de migrations para definir como as informações do model serão inseridas na base de dados.

resultado no terminal:

Migrations for 'website':
  website/migrations/0001_initial.py
    - Create model Post

Exemplo de arquivo gerado:

# Generated by Django 3.2.6 on 2021-08-04 19:12

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('sub_title', models.CharField(max_length=200)),
                ('content', models.TextField()),
            ],
        ),
    ]

_________________________________________

O comando a seguir, serve para criar a tabela na base de dados 

python manage.py migrate

_________________________________________

Para interagir com a tabela do banco de dados, é necessário documentar no arquivo admin, para possibilitar que o mesmo seja apresentado no admin do django.

http://127.0.0.1:8000/admin/

No arquivo admin.py do app criado.

devese-se realizar a importação do arquivo Model, e registrar o mesmo.

Exemplo de código:

from django.contrib import admin
from .models import Post

admin.site.register(Post)
_________________________________________

Tranforma seu projeto em um repositorio:

git init

Verifica o Status dos seus arquivos

git status

Para ignorart arquivos ou pastas, é necessário criar um arquivo chamado:

.gitignore

E dentro deste arquivo, escrever o nome da pasta que não será exportada.

Para fazer um commit do código basta executar:

git add .

Depois de executado este commando, deverá ser executado:

git commit -m "Comentário sobre o upload dos dados"

E para finalizar, basta executar

git push origin

Para verificar os branchs do git (como se fosse um usuario)

git branch -v

_________________________________________


O comando "Include" fornece a capacidade de inserir as URLS de outros APP's

Exemplo: 

from django.contrib import admin
from django.urls import path
from django.urls.conf import include
from .views import hello_world

urlpatterns = [
    path('admin/', admin.site.urls),
    path('hello/', hello_world),
    path('blog/', include('website.urls')),
]

E o arquivo também pode ser criado dentro dessas APPS caso não exista.

Exemplo: 

from django.urls import path
from .views import hello_blog

urlpatterns = [
    path('', hello_blog),

]

E dentro da Views chamada, basta criar uma função que te retorna as informações desejadas para ser apresentado.

É importante mencionar, que é possivel também retornar páginas HTML, criadas dentro do proprio APP.

exemplo:

from django.shortcuts import render
from django.http import HttpResponse
# Create your views here.

def hello_blog(request):

    return render(request, 'index.html')
    
Observação:

A pasta Templates [A pasta é criada pelo usuário] (onde se localiza o arquivo html) é automaticamente referenciada dentro do projeto, entretanto é possivel referenciar outros arquivos de outras pastas, sendo necessário acrescentar o caminho da pasta em settings.

Exemplo:

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates_geral'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

Onde a pasta está localizada fora da APP.

Exemplo:

from django.shortcuts import render
from django.http import HttpResponse
# Create your views here.

def hello_blog(request):

    return render(request, 'index_geral.html')
    
 _________________________________________
  
 Injetar conteudo dentro do Template
 
 É passado como response do meu render.
 
 Exemplo:
 
 from django.shortcuts import render
from django.http import HttpResponse
# Create your views here.

def hello_blog(request):

    data = {'name': 'Curso de Django 3'}

    return render(request, 'index.html', data)
    
Onde, é possivel resgatar o conteudo colocando o nome da key do dicionario entre duas chaves:

{{ name }}

Exemplo de uma lista de nomes:

Arquivo Views.py

from django.shortcuts import render
from django.http import HttpResponse
# Create your views here.

def hello_blog(request):
    lista = ['Django', 'Python', 'Git', 'HTML', 'Banco de Dados', 'Linux', 'Nginx', 'Uwsgi']
    data = {'name': 'Curso de Django 3', 'lista_tecnologias': lista}

    return render(request, 'index.html', data)
    

Arquivos. index.html

<h1> BLOG </h1>

{{ name }}

<ul>
{% for item in lista_tecnologias %}

    {% if item == 'Django' %}
        
        <li><b> {{ item }} </b></li> 

    {% else %}

        <li> {{ item }} </li> 

    {% endif %}

{% endfor %}
</ul>

__________________________

Consultar a base de dados

from .models import Post

def funcao_x():

	lista = Post.objects.all()
	
_________________________	

# mais informações https://docs.djangoproject.com/en/3.2/ref/contrib/admin/

Personalizar como é mostrado os objetos no modulo admin

Criar uma classe que herda de admin.ModelAdmin

E cria uma lista dos campos e passa a classe como parametro para o admin.site.register

Exemplo:

from django.contrib import admin
from .models import Post

class PostAdmin(admin.ModelAdmin):
    list_display = ['title', 'sub_title']

admin.site.register(Post, PostAdmin)


Ou até mesmo é possivel ativar o campo de busca, acrescentando apenas a classe mencionada anteriormente o seguinte comando:

search_fields = ['title', 'sub_title']

é possivel também determinar os campos que poderão ser editados e criados, sendo apresentado apenas os campos listados em fields.

fields = ['title', 'sub_title']

_________________________________-

Para alterar a maneira que os objetos são representados na edição de dados já cadastrados, basta criar uma função __str__ na classe do objeto, padraonizando assim a maneira que o dado será apresentado.

Exemplo:

from django.db import models

class Post(models.Model):
    title = models.CharField(max_length=100)
    sub_title = models.CharField(max_length=200)
    content = models.TextField() #tamanho em aberto

    def __str__(self):

        return self.title

É possivel também, criar novos "campos" de apresentação na listagem de objetos.

Basta criar um metodo (na classe do objeto) retornando a informação desejada, e ai em list_display, setar esse metodo.

Exemplo:

Arquivo models.py

from django.db import models

class Post(models.Model):
    title = models.CharField(max_length=100)
    sub_title = models.CharField(max_length=200)
    content = models.TextField() #tamanho em aberto

    def __str__(self):

        return self.title

    def full_name(self):
        return self.title + ' ' + self.sub_title

Arquivo admin.py

from django.contrib import admin
from .models import Post

class PostAdmin(admin.ModelAdmin):
    list_display = ['title', 'sub_title', 'full_name']
    search_fields = ['title', 'sub_title']
    fields = ['title', 'sub_title']

admin.site.register(Post, PostAdmin)

Inicialmente, o mesmo não poderá ser ordenado como os outros campos, entretanto, basta colocar o nome do metodo (na classe que se encontra em model.py) seguido de admin_order_fiel e setar qual será o campo usado para ordenar essa coluna.

Exemplo:

from django.db import models

class Post(models.Model):
    title = models.CharField(max_length=100)
    sub_title = models.CharField(max_length=200)
    content = models.TextField() #tamanho em aberto

    def __str__(self):

        return self.title

    def full_name(self):
        return self.title + ' ' + self.sub_title

    full_name.admin_order_field = 'title'
    
  ________________________________-
  
  Para criar uma lista de categorias, onde determinada sigla signifique um valor (comose criasse uma tabela para armazenar os tipos, siglas e ai associar a uma outra tabela). No Django, é possivel criar uma classe que herda da classe models.TextChoices e ali, em formato de variaveis, definirir as siglas e seus respectivos valores.
  
Desta forma, é cadastro no banco de dados apenas as siglas por exemplo, e quando apresentado ao usuário na tela de admin para o cadastro, o significado da sigla é apresentado.

Exemplo do código:

from django.db import models

class Categorias(models.TextChoices):
    TECH = 'TC', 'Tecnologia'
    CR = 'CR', 'Curiosidades'
    GR = 'GR', 'Geral'

class Post(models.Model):
    title = models.CharField(max_length=100)
    sub_title = models.CharField(max_length=200)
    content = models.TextField() #tamanho em aberto
    categories = models.CharField(max_length=2,
                        choices=Categorias.choices,
                        default=Categorias.GR)
    approved = models.BooleanField(default=True)

    def __str__(self):

        return self.title

    def full_name(self):
        return self.title + ' ' + self.sub_title

    full_name.admin_order_field = 'title'
  

